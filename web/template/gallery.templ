package template

import (
	"github.com/agiannif/adistantcloud/internal/config"
	"strconv"
)

templ Gallery(gallery *config.GalleryConfig, numRowsPerPage int) {
	@page() {
		@navWithHeader("/")
		<main class="max-w-7xl mx-auto p-6 grid grid-cols-79 gap-y-3 place-items-center">
			@imagePage(0, gallery, numRowsPerPage)
			@goToTopButton()
		</main>
		<div id="footer"></div>
	}
}

templ goToTopButton() {
	<div
		x-data="{ atTop: true }"
		@scroll.window="atTop = (window.pageYOffset < 10) ? true : false"
	>
		<button
			x-show="!atTop"
			x-cloak
			x-transition
			@click="window.scrollTo({top: 0, behavior: 'smooth'})"
			class="fixed bottom-8 right-8 p-3 rounded-full bg-ef-light-gray-dim hover:bg-ef-light-gray active:bg-ef-light-gray-light text-ef-light-bg-light focus:outline-none focus:ring-2 focus:ring-ef-light-blue/75 transition-all cursor-pointer"
		>
			<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
			</svg>
		</button>
	</div>
}

templ imagePage(index int, gallery *config.GalleryConfig, numRowsPerPage int) {
	{{ pageStart := min(index*numRowsPerPage, len(gallery.Rows)) }}
	{{ pageEnd := min(pageStart+numRowsPerPage, len(gallery.Rows)) }}
	{{ isFinalPage := pageEnd == len(gallery.Rows) }}
	for i, row := range gallery.Rows[pageStart:pageEnd] {
		{{ isFinalRow := i == numRowsPerPage-1 }}
		if row.Layout == config.LayoutSection {
			@sectionHeader(row.Title, index, isFinalRow, isFinalPage)
		} else {
			@imageRow(row, index, isFinalRow, isFinalPage)
		}
	}
	if isFinalPage {
		@footer()
	} else {
		<div id={ "target-div-" + strconv.Itoa(index) }></div>
	}
}

templ sectionHeader(title string, pageIndex int, isFinalRow, isFinalPage bool) {
	<div class="col-span-full w-full flex flex-col gap-1 mt-12">
		<p
			class="self-start -ml-4 text-ef-light-gray text-lg"
			if isFinalRow && !isFinalPage {
				hx-get={ "/img/" + strconv.Itoa(pageIndex+1) }
				hx-trigger="revealed"
				hx-swap="outerHTML"
				hx-target={ "#target-div-" + strconv.Itoa(pageIndex) }
			}
		>
			{ title }
		</p>
		<hr class="w-full border-t-2 border-ef-light-gray"/>
	</div>
}

templ imageRow(row config.RowConfig, pageIndex int, isFinalRow, isFinalPage bool) {
	{{ gridConfigs := getGridConfigs(row.Layout) }}
	for i, image := range row.Images {
		{{ isLastImage := i == len(row.Images)-1 }}
		{{ imagePath := "/assets/images/" + image.File }}
		<div
			x-data="{
			  isFullscreen: false,
				openFullscreen() {
				  this.isFullscreen = true;
					document.body.style.overflow = 'hidden';
					document.body.style.height = '100%';
				},
				closeFullscreen() {
				  this.isFullscreen = false;
					document.body.style.height = '';
					setTimeout(() => { document.body.style.overflow = ''; }, 100);
				}
			}"
			@keyup.escape.window="closeFullscreen()"
			class={ "col-start-" + gridConfigs[i].Start + " col-span-" + gridConfigs[i].Span + " bg-ef-light-bg-dim" }
		>
			<img
				@click="openFullscreen()"
				@load="$el.style.opacity=1"
				class="transition duration-300 opacity-0 cursor-pointer"
				src={ imagePath }
				alt={ image.Alt }
				if isFinalRow && isLastImage && !isFinalPage {
					hx-get={ "/img/" + strconv.Itoa(pageIndex+1) }
					hx-trigger="revealed"
					hx-swap="outerHTML"
					hx-target={ "#target-div-" + strconv.Itoa(pageIndex) }
				}
			/>
			// Fullscreen overlay
			<template x-teleport="body">
				<div
					x-show="isFullscreen"
					@click="closeFullscreen()"
					class="fixed inset-0 z-50 cursor-pointer bg-white/[.98] touch-none"
				>
					<img
						x-show="isFullscreen"
						x-transition:enter.duration.500ms
						x-transition:leave.duration.400ms
						class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 max-h-screen max-w-screen object-contain touch-none"
						src={ imagePath }
						alt={ image.Alt }
					/>
				</div>
			</template>
		</div>
	}
}

type GridConfig struct {
	Start string
	Span  string
}

func getGridConfigs(layout config.Layout) []GridConfig {
	// different layouts support different numbers of photos
	// for now we just assume that there are the correct number of photos provided per row
	switch layout {
	case config.LayoutFull:
		return []GridConfig{{"1", "79"}}
	case config.LayoutHalf:
		return []GridConfig{{"1", "39"}, {"41", "39"}}
	case config.LayoutSplit:
		return []GridConfig{{"1", "54"}, {"56", "24"}}
	case config.LayoutFlipSplit:
		return []GridConfig{{"1", "24"}, {"26", "54"}}
	case config.LayoutCenter:
		return []GridConfig{{"21", "39"}}
	default:
		return []GridConfig{}
	}
}
