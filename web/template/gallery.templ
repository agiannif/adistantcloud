package template

import (
	"github.com/agiannif/adistantcloud/internal/config"
	"strconv"
)

templ Gallery(gallery *config.GalleryConfig) {
	@page() {
		@navWithHeader("/")
		<div class="flex justify-center">
			<div
				class="grid grid-cols-[256px_minmax(0,_1fr)_256px]"
				x-data="{
					activeSection: null,
					sections: document.querySelectorAll('h2[id^=section]'),
					updateGalleryNav() {
						// calculate distance of all gallery sections
            let midScreen = window.innerHeight / 2
            let sectionsByDistanceFromTop = {}
            this.sections.forEach(section => {
                sectionsByDistanceFromTop[section.getBoundingClientRect().top - midScreen] = section
            })

            // find the section that is the closest and above the midpoint
            let closestNegativeTop = Math.max(...Object.keys(sectionsByDistanceFromTop).filter(top => top < 0))
            if (closestNegativeTop >= 0 || [Infinity, NaN, -Infinity].includes(closestNegativeTop)) {
						  return this.activeSection = null
						}
            this.activeSection = sectionsByDistanceFromTop[closestNegativeTop].id
					}
				}"
				x-init="updateGalleryNav()"
				@scroll.window.throttle.50ms="updateGalleryNav()"
			>
				<div>
					@galleryNav(gallery)
				</div>
				<main class="max-w-7xl p-6 grid grid-cols-79 gap-y-3 place-items-center">
					{{ currentSection := 0 }}
					for _, row := range gallery.Rows {
						@galleryRow(row, currentSection)
						if row.Layout == config.LayoutSection {
							{{ currentSection++ }}
						}
					}
					@goToTopButton()
				</main>
			</div>
		</div>
		@footer()
	}
}

templ galleryNav(gallery *config.GalleryConfig) {
	<nav class="fixed top-1/4 px-6 py-3">
		<ul class="space-y-2">
			{{ currentSection := 0 }}
			for _, row := range gallery.Rows {
				if row.Layout == config.LayoutSection {
					<li>
						<a
							href={ templ.URL("#section" + strconv.Itoa(currentSection)) }
							class="text-ef-light-fg transition-colors duration-300"
							:class={ "activeSection === 'section" + strconv.Itoa(currentSection) + "' ? '-ml-4 text-ef-light-purple' : 'hover:text-ef-light-purple'" }
						>
							{ "-- " + row.ShortTitle }
						</a>
					</li>
					{{ currentSection++ }}
				}
			}
		</ul>
	</nav>
}

templ goToTopButton() {
	<div
		x-data="{ atTop: true }"
		@scroll.window="atTop = (window.pageYOffset < 10) ? true : false"
	>
		<button
			x-show="!atTop"
			x-cloak
			x-transition
			@click="window.scrollTo({top: 0, behavior: 'smooth'})"
			class="fixed bottom-8 right-8 z-50 p-3 rounded-full bg-ef-light-gray-dim hover:bg-ef-light-gray active:bg-ef-light-gray-light text-ef-light-bg-light focus:outline-none focus:ring-2 focus:ring-ef-light-blue/75 transition-all cursor-pointer"
		>
			<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
			</svg>
		</button>
	</div>
}

templ galleryRow(row config.RowConfig, currentSection int) {
	if row.Layout == config.LayoutSection {
		@sectionHeader(row.Title, currentSection)
	} else {
		@imageRow(row, currentSection < 2)
	}
}

templ sectionHeader(title string, currentSection int) {
	<div class="col-span-full w-full flex flex-col gap-1 mt-12">
		<h2
			id={ "section" + strconv.Itoa(currentSection) }
			class="self-start -ml-4 text-ef-light-gray text-lg scroll-m-16"
		>
			{ title }
		</h2>
		<hr class="w-full border-t-2 border-ef-light-gray"/>
	</div>
}

templ imageRow(row config.RowConfig, highPriority bool) {
	{{ gridConfigs := getGridConfigs(row.Layout) }}
	for i, image := range row.Images {
		{{ imagePath := "/assets/images/" + image.File }}
		<div
			x-data="{
			  isFullscreen: false,
				openFullscreen() {
				  this.isFullscreen = true;
					document.body.style.overflow = 'hidden';
					document.body.style.height = '100%';
				},
				closeFullscreen() {
				  this.isFullscreen = false;
					document.body.style.height = '';
					setTimeout(() => { document.body.style.overflow = ''; }, 100);
				}
			}"
			@keyup.escape.window="closeFullscreen()"
			class={ "md:col-span-" + gridConfigs[i].Span + " md:col-start-" + gridConfigs[i].Start + " col-span-79 col-start-1 bg-ef-light-bg-dim" }
		>
			<img
				@click="openFullscreen()"
				@load="$el.style.opacity=1"
				class="transition duration-300 opacity-0 cursor-pointer"
				if highPriority {
					fetchpriority="high"
				}
				loading="lazy"
				src={ imagePath }
				alt={ image.Alt }
				width="1232"
				height="820"
			/>
			// Fullscreen overlay
			<template x-teleport="body">
				<div
					x-show="isFullscreen"
					@click="closeFullscreen()"
					class="fixed inset-0 z-50 cursor-pointer bg-white/[.98] touch-none"
				>
					<img
						x-show="isFullscreen"
						x-transition:enter.duration.500ms
						x-transition:leave.duration.400ms
						class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 max-h-screen max-w-screen object-contain touch-none"
						loading="lazy"
						src={ imagePath }
						alt={ image.Alt }
						width="1232"
						height="820"
					/>
				</div>
			</template>
		</div>
	}
}

type GridConfig struct {
	Start string
	Span  string
}

func getGridConfigs(layout config.Layout) []GridConfig {
	// different layouts support different numbers of photos
	// for now we just assume that there are the correct number of photos provided per row
	switch layout {
	case config.LayoutFull:
		return []GridConfig{{"1", "79"}}
	case config.LayoutHalf:
		return []GridConfig{{"1", "39"}, {"41", "39"}}
	case config.LayoutSplit:
		return []GridConfig{{"1", "54"}, {"56", "24"}}
	case config.LayoutFlipSplit:
		return []GridConfig{{"1", "24"}, {"26", "54"}}
	case config.LayoutCenter:
		return []GridConfig{{"21", "39"}}
	default:
		return []GridConfig{}
	}
}
